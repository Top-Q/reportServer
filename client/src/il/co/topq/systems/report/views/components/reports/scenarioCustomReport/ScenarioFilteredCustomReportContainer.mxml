<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:grids="il.co.topq.systems.report.views.components.reports.grids.*"
				   xmlns:tools="il.co.topq.systems.report.views.components.reports.tools.*"
				   xmlns:common="il.co.topq.systems.report.views.components.reports.common.*"
				   height="100%" width="100%" borderVisible="false" chromeColor="#D4E4FB"
				   color="#000000" creationComplete="onCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import il.co.topq.systems.report.events.general.DeleteScenarioEvent;
			import il.co.topq.systems.report.events.general.SelectAllCheckBoxClickedEvent;
			import il.co.topq.systems.report.events.general.UpdateEvent;
			import il.co.topq.systems.report.events.scenario.DeleteOrphanPropertiesEvent;
			import il.co.topq.systems.report.events.scenario.DeleteScenarioByScenarioQueryEvent;
			import il.co.topq.systems.report.util.Resource;
			
			import mx.collections.ArrayList;
			import mx.events.CloseEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.as3commons.collections.framework.IIterator;
			[Event(name="scenarioDetailsGetScenarioTestsEvent", type="il.co.topq.systems.report.events.general.ScenarioDetailsGetScenarioTestsEvent")]		
			
			import il.co.topq.systems.report.events.general.ShowCustomReportsEvent;
			import il.co.topq.systems.report.models.ReportModelLocator;
			import il.co.topq.systems.report.models.valueobjects.*;
			import il.co.topq.systems.report.views.components.reports.tools.TimeRangeChooser;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var scenarioCustomReportGridModel:ScenarioCustomReportGridModel = ReportModelLocator.getScenarioCustomReportGridModel();
			
			[Bindable]
			private var reportTitle:String = "Scenario Custom Report";
			
			protected var timeRangeChooser:TimeRangeChooser;
			protected var  ANY_VALUE_INDEX:Number = 0;			
			protected var comboBoxPropertyValueArr:Array;
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				Alert.show("Need to inherit and override this method");
			}
			
			protected function cancel_clickHandler(event:Event):void
			{	
				PopUpManager.removePopUp(this);
			}
			
			protected function setCustomReportTitle():void{
				
				var title:String = "Scenario Custom Report";
				
				if (timeRangeChooser != null){
					scenarioCustomReportGridModel.scenarioQuery.timeRange = timeRangeChooser.getFilter().timeRange;
					
					if ((timeRangeChooser.lowerDate.selectedDate != null) && (timeRangeChooser.upperDate.selectedDate != null)){
						var from:String = formatDate(timeRangeChooser.lowerDate.selectedDate.getTime());
						var to:String = formatDate(timeRangeChooser.upperDate.selectedDate.getTime());
						title += " between " + from + " and " + to ;
					}
				}
				reportTitle = title;
			}
			
			public function formatDate(date:Number):String{
				var df:DateFormatter = new DateFormatter();   
				df.formatString = "DD/MM/YY";  
				var d:Date = new Date(date);   
				return df.format(d);
			}
			
			protected function handleNextClicked(event:MouseEvent):void{
				Alert.show("Need to inherit and override this method");
			}
			
			protected function handlePreviousClicked(event:MouseEvent):void{
				Alert.show("Need to inherit and override this method");
			}
			
			/**
			 * This method will add event listners to the Navigation component.
			 * Will listen on next | previous clicks.
			 **/
			protected function addNavigationListners():void {
				navigation.LinkButtonPreviousLabel.addEventListener(MouseEvent.CLICK,handlePreviousClicked);
				navigation.LinkButtonPreviousIcon.addEventListener(MouseEvent.CLICK,handlePreviousClicked);
				navigation.LinkButtonNextLabel.addEventListener(MouseEvent.CLICK,handleNextClicked);
				navigation.LinkButtonNextIcon.addEventListener(MouseEvent.CLICK,handleNextClicked);
			}
			
			private function getHGroup():HGroup{
				var hgroup:HGroup = new HGroup();
				hgroup.percentWidth = 100;
				hgroup.height=30;
				hgroup.paddingLeft=25;
				hgroup.paddingTop=5;
				hgroup.paddingBottom=5;
				hgroup.verticalAlign="middle";
				return hgroup;
			}
			
			protected function populatePropertValuesComboBox():void {
				comboBoxPropertyValueArr = new Array();				
				var numOfProperties:Number = scenarioCustomReportGridModel.scenarioCustomReportPropertiesValues.length;
				for (var i:int=0; i<numOfProperties; i++){
					var propertyValuesWrapper:PropertyValuesWrapper = (scenarioCustomReportGridModel.scenarioCustomReportPropertiesValues[i]) as PropertyValuesWrapper;
					propertyValuesWrapper.propertyValues.addItemAt("All",0);
					
					var hgroup:HGroup = getHGroup();
					hgroup.width = propertiesContainer.width;
					var label:mx.controls.Label = new mx.controls.Label();		
					label.width = propertyKeyLabel.width;
					label.text = propertyValuesWrapper.propertyKey;
					label.truncateToFit = true;
					
					var comboBox:ComboBox = new ComboBox();
					comboBox.setStyle("chromeColor","#ffffff");
					comboBox.width = 200;
					comboBox.name=label.text;
					comboBox.editable = false;
					comboBoxPropertyValueArr.push(comboBox);					
					comboBox.itemRenderer = new ClassFactory (mx.controls.Label);
					comboBox.dataProvider = propertyValuesWrapper.propertyValues;
					comboBox.addEventListener("change",combobox_changeHandler);
					hgroup.addElement(label);
					hgroup.addElement(comboBox);
					propertiesContainer.addElement(hgroup);
				}
				propertiesTitle.visible = true;
			}
			
			protected function combobox_changeHandler(event:ListEvent):void
			{
				Alert.show("Need to inherit and override this method");
			}
			
			protected function getResults():void{
				Alert.show("Need to inherit and override this method");
			}
			
			protected function onGetResultsClick(event:MouseEvent):void
			{				
				getResults();
			}
			
			/**
			 * This method will be called once save is clicked in the select Time range pop up.
			 **/
			public function saveTimeRangeClicked(event:MouseEvent):void{			
				getTimeRangeData();
				PopUpManager.removePopUp(timeRangeChooser);
				getResults();
			}
			
			private function getTimeRangeData():void{
				scenarioCustomReportGridModel.scenarioQuery.timeRange = timeRangeChooser.getFilter().timeRange;
			}
			
			public function cleanTimeRangeClicked(event:MouseEvent):void{			
				getTimeRangeData();
				PopUpManager.removePopUp(timeRangeChooser);
				getResults();
			}
			
			protected function setPropertiesInScenarioQuery():void{
				
				scenarioCustomReportGridModel.scenarioQuery.scenarioProperties = new ArrayCollection();//will reset test query properties.
				
				for (var i:int=0; i<comboBoxPropertyValueArr.length; i++){
					var c:ComboBox = comboBoxPropertyValueArr[i] as ComboBox;
					
					if (c.selectedIndex != ANY_VALUE_INDEX){
						scenarioCustomReportGridModel.scenarioQuery.scenarioProperties.addItem(new ScenarioProperty(c.name,c.selectedItem as String));					
					}else{
						scenarioCustomReportGridModel.scenarioQuery.scenarioProperties.addItem(new ScenarioProperty(c.name,""));						
					}
				}
			}
			
			protected function tools_changeHandler(event:IndexChangeEvent):void
			{
				Alert.show("Need to inherit and override this method");
			}
			
			protected function customReportsLinkButton_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new ShowCustomReportsEvent());				
			}
			
			/**
			 * This method will get all the selected scenario from the grid and will return them as array collection
			 */ 
			private function getAllSelectedScenarios():ArrayList{
				var scenarioArr:ArrayList = new ArrayList();
				var keyIterator:IIterator = executionGrid.selectedScenarios.keyIterator();
				while(keyIterator.hasNext()){
					scenarioArr.addItem(keyIterator.next() as String);
				}		
				return scenarioArr;
			}
			
			/**
			 * This method will get an arrayList of objects which has toString implementation and a delimiter.<br>
			 * It will create a string which concat each object in list and delimiter.<br>
			 */ 
			private function concatListToString(objectList:ArrayList,delimiter:String):String{
				var result:String ="";
				for(var i:int=0; i<objectList.length; i++){
					result += objectList.getItemAt(i) + delimiter;
				}
				return result;
			}
			
			protected function deleteScenarioCallbackResult(data:ResultEvent): void
			{
				//Call delete orphan scenario properties -> async, busy = false;
				new DeleteOrphanPropertiesEvent().dispatch();
				currentState = "Normal";//back to normal state.
				executionGrid.headerCheckBoxSelected = false;//after deletion completed header checkbox should not be selected.
				executionGrid.areAllScenariosSelected = false;
				executionGrid.selectedScenarios.clear();
				Alert.show('Delete operation completed successfully', '', mx.controls.Alert.OK);
				var updateEvent:UpdateEvent = new UpdateEvent(true);
				dispatchEvent(updateEvent);
			}
			
			protected function callbackFault(info:Object): void
			{
				Alert.show("Operation Failed");
			}
			
			/**
			 * This method will be called upon the selection of all scenario from grid and the request for delete.<br>
			 * This is needed in order to prevent from the user to erase all executions in DB in case he did not mean to.
			 */ 
			private function deleteAllHandler():void {
				Alert.show("All Executions will be deleted from DB.\Do you wish to proceed?","Delete All Executions from DB", Alert.OK | Alert.CANCEL, null, deleteAllAlertListner, null, Alert.OK);
			}
			
			/**
			 * This method will be called in case user CONFIRMS the deletion of all scenario from DB.<br>
			 * It will dispatch a delete all scenarios event<br>
			 */ 
			private function deleteAllAlertListner(eventObj:CloseEvent):void {
				if (eventObj.detail==Alert.OK) {
					new DeleteScenarioByScenarioQueryEvent(scenarioCustomReportGridModel.scenarioQuery,deleteScenarioCallbackResult,callbackFault).dispatch();
				}
			}
			
			protected function deleteImg_clickHandler(event:MouseEvent):void
			{
				if (executionGrid.areAllScenariosSelected){
					deleteAllHandler();
				}else {
					
					var selectedScenarios:ArrayList = getAllSelectedScenarios();
					var selectedScenariosString:String = concatListToString(selectedScenarios,",");
					if (selectedScenarios.length > 0){
						new DeleteScenarioEvent(selectedScenariosString,deleteScenarioCallbackResult,callbackFault).dispatch(); 
					}else {
						Alert.show("Select at least one execution to delete");
					}
				}
			}
			
			protected function LinkButtonSelectAllExecutionsFromDB_clickHandler(event:MouseEvent):void
			{
				executionGrid.areAllScenariosSelected = true;
				executionGrid.headerCheckBoxSelected = true;
				currentState = 	"AllExecutionsSelected";				
			}
			
			protected function LinkButtonDeselectAllExecutionsFromDB_clickHandler(event:MouseEvent):void
			{
				executionGrid.areAllScenariosSelected = false;
				executionGrid.deselectAllCheckBox();
				currentState = 	"Normal";
			}
			
			protected function selectAllCheckBoxClicked(event:SelectAllCheckBoxClickedEvent):void
			{
				if (event.select){
					this.currentState = "SelectAllCheckBoxSelected"; //show the select all from db option.
				}else{
					this.currentState = "Normal";//back to normal.
				}
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%"  height="100%">
		<s:HGroup width="100%" height="35%" horizontalAlign="center" paddingLeft="20"
				  paddingRight="20" verticalAlign="middle">
			<s:HGroup width="50%" height="100%" horizontalAlign="left"
					  paddingRight="10" verticalAlign="top" paddingTop="10">
				<s:VGroup  width="100%" height="100%">
					<s:HGroup id="propertiesTitle" color="#3f68a1" fontWeight="bold" visible="false" width="100%" 
							  height="30" paddingLeft="25" paddingBottom="5" verticalAlign="middle">
						<s:Label id="propertyKeyLabel" width="300" text="Property Key"/>
						<s:Label   text="Property Value"/>
					</s:HGroup>

					<s:HGroup id="propertiesVGroup" width="550" height="100%">
						<s:Scroller width="100%" height="90%" horizontalScrollPolicy="off">
							<s:VGroup id="propertiesContainer" clipAndEnableScrolling="true"/>
						</s:Scroller>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			<s:HGroup width="50%" height="100%" horizontalAlign="right" paddingBottom="10"
					  paddingRight="10" verticalAlign="bottom">
				<s:VGroup y="24" width="100%" height="100%">
					<s:HGroup width="100%" height="100%" paddingTop="10" verticalAlign="top">
						<s:Spacer width="100%" height="100%"/>
						<mx:LinkButton id="scenarioCustomReportsLinkButton" label="Custom Reports" enabled="true"  icon="@Embed(source='/assets/images/showAll.png')" click="customReportsLinkButton_clickHandler(event)"/>
					</s:HGroup>
					
					
					<s:HGroup width="100%" height="100%" horizontalAlign="right" paddingRight="10" verticalAlign="middle">
						<s:HGroup width="200" height="40%" horizontalAlign="right">
							<s:Image id="deleteImg" height="100%" buttonMode="true"
									 click="deleteImg_clickHandler(event)" fillMode="scale"
									 mouseChildren="false" scaleMode="stretch" source="{Resource.DELETE_IMG_SOURCE}"
									 toolTip="Delete Execution" useHandCursor="true"/>
							<s:Button buttonMode="true" click="onGetResultsClick(event)" mouseChildren="false"
									  skinClass="il.co.topq.systems.report.views.skin.RefreshButtonSkin"
									  toolTip="Get Results" useHandCursor="true"/>
						</s:HGroup>
						<tools:FilterdCustomReportTools id="tools" height="30"
														change="tools_changeHandler(event)"
														selectedItem="Tools"/>
					</s:HGroup>
					
					<s:VGroup width="100%" height="50%" horizontalAlign="left" verticalAlign="bottom" >
						<s:HGroup id="selectAllExecutionsGroup" width="100%" height="100%" horizontalAlign="right"  verticalAlign="bottom" includeIn="SelectAllCheckBoxSelected">
							<mx:LinkButton id="LinkButtonSelectAllExecutionsFromDB" click="LinkButtonSelectAllExecutionsFromDB_clickHandler(event)"
										   label="Select all executions that match this search"
										   enabled="true" textDecoration="underline"/>
						</s:HGroup>
						<s:HGroup id="deselectAllExecutionsGroup" width="100%" height="100%" horizontalAlign="right"  verticalAlign="bottom" includeIn="AllExecutionsSelected">
							<mx:LinkButton id="LinkButtonDeselectAllExecutionsFromDB" click="LinkButtonDeselectAllExecutionsFromDB_clickHandler(event)" 
										   label="All Executions that match this search are selected. Clear selection"
										   enabled="true" textDecoration="underline"/>
						</s:HGroup>
					</s:VGroup>
				</s:VGroup>
			</s:HGroup>
		</s:HGroup>
		<s:VGroup width="100%" height="100%">
			<grids:ExecutionReportGrid id="executionGrid" height="100%" dataProvider="{scenarioCustomReportGridModel.gridData.items}"/>
		</s:VGroup>
		<common:Navigation paddingBottom="8" width="100%" paddingTop="8" verticalAlign="middle" horizontalAlign="center"
							   id="navigation" navModel="{scenarioCustomReportGridModel.navigation}"/>
	</s:VGroup>
	
	<s:states>
		<s:State name="Normal"/>
		<s:State name="AllExecutionsSelected" />
		<s:State name="SelectAllCheckBoxSelected"/>
	</s:states>
	
</s:BorderContainer>
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PublisherView.java
 *
 * Created on 31/08/2011, 12:26:19
 */
package jsystem.publisher.plugin;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.io.File;

import java.util.Enumeration;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.TreePath;


import jsystem.framework.FrameworkOptions;
import jsystem.framework.JSystemProperties;
import jsystem.framework.report.Reporter;
import jsystem.utils.StringUtils;
import jsystem.utils.SwingUtils;
import jsystem.runner.ErrorLevel;
import jsystem.treeui.actionItems.PublishXmlResultAction;
import jsystem.treeui.error.ErrorPanel;
import jsystem.treeui.images.ImageCenter;
import jsystem.treeui.interfaces.JSystemTab;
import jsystem.treeui.publisher.ElementNode;
import jsystem.treeui.teststable.TestsTableController;

import org.w3c.dom.Element;

/**
 * 
 * @author Nelly_c
 */
public class PublisherView extends JPanel implements JSystemTab, ActionListener, TreeSelectionListener {

	private static final long serialVersionUID = 5322978703651238455L;
	private static Logger log = Logger.getLogger(PublisherView.class.getName());
	private String reportFileName = "reports.0.xml";
	private PublisherTreeModel treeModel;
	private static ElementNode currentNode;
	DefaultTableModel testParamsTableModel;
	DefaultTableModel executionTableModel;
	DefaultTableModel testPropertiesTableModel;

	// private TestInfoPanel infoPanel;

	public JPanel init() {
		return this;
	}

	/** Creates new form PublisherView */
	public PublisherView() {
		initComponents();

		File logCurrent = new File(JSystemProperties.getInstance().getPreference(FrameworkOptions.LOG_FOLDER),
				"current");

		File reportFile = new File(logCurrent, reportFileName);
		try {
			treeModel = new PublisherTreeModel(reportFile);
		} catch (Exception e) {
			log.log(Level.WARNING, "Fail to create tree model", e);
		}

		// TestInfoPanel infoPanel = new TestInfoPanel(this);
		// infoPanel.setParent(this);

		testsTree.addTreeSelectionListener(this);
		refreshTree(true);
		setVisible(true);
	}

	public String getTabName() {
		return "Publisher";
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PublisherView().setVisible(true);
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jToolBar1 = SwingUtils.getJToolBarWithBgImage("publisher", JToolBar.HORIZONTAL, ImageCenter.getInstance()
				.getImage(ImageCenter.ICON_TOP_TOOLBAR_BG));
		jToolBar1.setLayout(new FlowLayout(FlowLayout.LEFT, 1, 1));
		jToolBar1.setFloatable(false);
		jToolBar1.setRollover(true);
		jToolBar1.setBorder(null);

//		jToolBar2 = SwingUtils.getJToolBarWithBgImage("url", JToolBar.HORIZONTAL,
//				ImageCenter.getInstance().getImage(ImageCenter.ICON_TOP_TOOLBAR_BG));
//		jToolBar2.setLayout(new FlowLayout(FlowLayout.LEFT, 1, 1));
//		jToolBar2.setFloatable(false);
//		jToolBar2.setRollover(true);
//		jToolBar2.setBorder(null);

		refreshButton = new javax.swing.JButton();
		filterCombo = new javax.swing.JComboBox();
		deleteButton = new javax.swing.JButton();
		saveButton = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		textUrl = new javax.swing.JTextField();
		jSplitPane1 = new javax.swing.JSplitPane();
		jScrollPane1 = new javax.swing.JScrollPane();
		testsTree = new javax.swing.JTree();
		jScrollPane3 = new javax.swing.JScrollPane();
		jPanel5 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		lbTestName = new javax.swing.JLabel();
		testNameField = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		testIndexField = new javax.swing.JLabel();
		lbTestIndex = new javax.swing.JLabel();
		jPanel6 = new javax.swing.JPanel();
		testTimeField = new javax.swing.JLabel();
		lbTestTime = new javax.swing.JLabel();
		jPanel7 = new javax.swing.JPanel();
		lbStatus = new javax.swing.JLabel();
		radioWarning = new javax.swing.JRadioButton();
		radioWarning.setBackground(new Color(0xf6, 0xf6, 0xf6));
		radioPass = new javax.swing.JRadioButton();
		radioPass.setBackground(new Color(0xf6, 0xf6, 0xf6));
		radioFail = new javax.swing.JRadioButton();
		radioFail.setBackground(new Color(0xf6, 0xf6, 0xf6));
		jPanel8 = new javax.swing.JPanel();
		lbErrorCause = new javax.swing.JLabel();
		testErrorCause = new java.awt.TextArea();
		testTabView = new javax.swing.JTabbedPane();
		testTabView.setBackground(new Color(0xf6, 0xf6, 0xf6));
		pnParameters = new javax.swing.JPanel();
		jScrollPane9 = new javax.swing.JScrollPane();
		testParametersTable = new javax.swing.JTable();
		testParametersTable.setBackground(new Color(0xf6, 0xf6, 0xf6));
		pnTestProperties = new javax.swing.JPanel();
		jScrollPane8 = new javax.swing.JScrollPane();
		testPropertiesTable = new javax.swing.JTable();
		testPropertiesTable.setBackground(new Color(0xf6, 0xf6, 0xf6));
		addTestPropButton = new javax.swing.JButton();
		applyTestPropButton = new javax.swing.JButton();
		removeTestPropButton = new javax.swing.JButton();
		pnDocumentation = new javax.swing.JPanel();
		jScrollPane7 = new javax.swing.JScrollPane();
		taDocumentationValue = new javax.swing.JTextArea();
		jPanel4 = new javax.swing.JPanel();
		addButton = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		propertiesTable = new javax.swing.JTable();
		propertiesTable.setBackground(new Color(0xf6, 0xf6, 0xf6));
		applyButton = new javax.swing.JButton();
		removeButton = new javax.swing.JButton();

		// setMaximumSize(new java.awt.Dimension(327670, 327670));
		// setPreferredSize(new java.awt.Dimension(1200, 800));
		setPreferredSize(new java.awt.Dimension(javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE));

		refreshButton.setIcon(ImageCenter.getInstance().getImage(ImageCenter.ICON_REFRESH_REPORTS)); // NOI18N
		refreshButton.setText("Refresh");
		refreshButton.setAlignmentX(5.0F);
		refreshButton.setMaximumSize(new java.awt.Dimension(100, 23));
		refreshButton.setPreferredSize(new java.awt.Dimension(100, 23));

		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(refreshButton);

		filterCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Fail Only",
				"Fail & Warning Only" }));
		filterCombo.setToolTipText("Filter Tests by...");
		filterCombo.setMaximumSize(new java.awt.Dimension(120, 20));
		filterCombo.setPreferredSize(new java.awt.Dimension(120, 20));
		filterCombo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				filterComboActionPerformed(evt);
			}
		});
		jToolBar1.add(filterCombo);

		deleteButton.setIcon(ImageCenter.getInstance().getImage(ImageCenter.ICON_DELETE)); // NOI18N
		deleteButton.setText("Delete");
		deleteButton.setMaximumSize(new java.awt.Dimension(100, 23));
		deleteButton.setPreferredSize(new java.awt.Dimension(100, 23));
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(deleteButton);

		saveButton.setIcon(ImageCenter.getInstance().getImage(ImageCenter.ICON_SAVE)); // NOI18N
		saveButton.setText("Save");
		saveButton.setToolTipText("Save test info changes");
		saveButton.setMaximumSize(new java.awt.Dimension(100, 23));
		saveButton.setPreferredSize(new java.awt.Dimension(100, 23));
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(saveButton);

		jToolBar1.add(PublishXmlResultAction.getInstance());
		PublishXmlResultAction.getInstance().setEnabled(false);

//		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
//		jLabel2.setText("Reporter URL: ");
//		jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
//		jLabel2.setMaximumSize(new java.awt.Dimension(90, 14));
//		jLabel2.setPreferredSize(new java.awt.Dimension(90, 14));
//		jToolBar2.add(jLabel2);
//
//		textUrl.setText("localhost:8080");
//		textUrl.setToolTipText("IP:Port");
//		textUrl.setMaximumSize(new java.awt.Dimension(32767, 32767));
//		textUrl.setPreferredSize(new java.awt.Dimension(400, 20));
//		textUrl.addActionListener(new ActionListener() {
//			@Override
//			public void actionPerformed(ActionEvent e) {
//				urlChanged(e);
//			}
//		});
//		jToolBar2.add(textUrl);

		jSplitPane1.setDividerSize(0);
		jSplitPane1.setResizeWeight(0.4);
		// jSplitPane1.setPreferredSize(new java.awt.Dimension(800, 800));
		jSplitPane1.setPreferredSize(new java.awt.Dimension(javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE));
		jSplitPane1.setRequestFocusEnabled(false);
		jSplitPane1.setBorder(null);
		jSplitPane1.setLeftComponent(jScrollPane1);

		// jPanel5.setPreferredSize(new java.awt.Dimension(400, 400));

		jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Test Information",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

		lbTestName.setFont(new java.awt.Font("Tahoma 11", 1, 12));
		lbTestName.setText("Test Name:");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel1Layout
								.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(lbTestName, javax.swing.GroupLayout.PREFERRED_SIZE, 96,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(33, 33, 33)
								.addComponent(testNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 217,
										javax.swing.GroupLayout.PREFERRED_SIZE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel1Layout
								.createSequentialGroup()
								.addGroup(
										jPanel1Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(testNameField, javax.swing.GroupLayout.Alignment.LEADING,
														javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
												.addComponent(lbTestName, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap()));

		lbTestIndex.setFont(new java.awt.Font("Tahoma 11", 1, 12));
		lbTestIndex.setText("Test Index:");
		lbTestIndex.setMaximumSize(new java.awt.Dimension(63, 14));
		lbTestIndex.setMinimumSize(new java.awt.Dimension(63, 14));
		lbTestIndex.setPreferredSize(new java.awt.Dimension(63, 14));

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel3Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(lbTestIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 97,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(32, 32, 32)
								.addComponent(testIndexField, javax.swing.GroupLayout.PREFERRED_SIZE, 226,
										javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel3Layout
								.createSequentialGroup()
								.addGroup(
										jPanel3Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(testIndexField, javax.swing.GroupLayout.DEFAULT_SIZE, 17,
														Short.MAX_VALUE)
												.addComponent(lbTestIndex, javax.swing.GroupLayout.DEFAULT_SIZE, 17,
														Short.MAX_VALUE)).addContainerGap()));

		lbTestTime.setFont(new java.awt.Font("Tahoma 11", 1, 12));
		lbTestTime.setText("Test Execution Time:");

		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel6Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(lbTestTime)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(testTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 236,
										javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
		jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel6Layout
								.createSequentialGroup()
								.addGroup(
										jPanel6Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(testTimeField, javax.swing.GroupLayout.DEFAULT_SIZE, 17,
														Short.MAX_VALUE)
												.addComponent(lbTestTime, javax.swing.GroupLayout.Alignment.LEADING))
								.addContainerGap()));

		lbStatus.setFont(new java.awt.Font("Tahoma 11", 1, 12));
		lbStatus.setText("Status:");

		radioPass.setText("Pass");
		radioPass.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				radioPassItemStateChanged(evt);
			}
		});

		radioFail.setText("Fail");
		radioFail.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				radioFailItemStateChanged(evt);
			}
		});

		radioWarning.setText("Warning");
		radioWarning.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				radioWarningItemStateChanged(evt);
			}
		});

		javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
		jPanel7.setLayout(jPanel7Layout);
		jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel7Layout.createSequentialGroup().addContainerGap().addComponent(lbStatus)
								.addGap(88, 88, 88).addComponent(radioPass).addGap(33, 33, 33).addComponent(radioFail)
								.addGap(29, 29, 29).addComponent(radioWarning).addContainerGap(56, Short.MAX_VALUE)));
		jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel7Layout
								.createSequentialGroup()
								.addGroup(
										jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(lbStatus).addComponent(radioPass).addComponent(radioFail)
												.addComponent(radioWarning)).addContainerGap()));

		lbErrorCause.setFont(new java.awt.Font("Tahoma 11 12", 1, 12)); // NOI18N
		lbErrorCause.setText("Error Cause:");

		javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
		jPanel8.setLayout(jPanel8Layout);
		jPanel8Layout.setHorizontalGroup(jPanel8Layout.createSequentialGroup()
		// .createParallelGroup(
		// javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel8Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(lbErrorCause)
								// .addGap(50, 50, 50)
								.addContainerGap()
								.addComponent(testErrorCause, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								// .addGap(98, 98, 98))
								.addContainerGap()));
		jPanel8Layout.setVerticalGroup(jPanel8Layout.createSequentialGroup()
		// .createParallelGroup(
		// javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel8Layout
								.createSequentialGroup()
								.addGroup(
										jPanel8Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(lbErrorCause)
												.addComponent(testErrorCause, 0, javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)).addContainerGap()));

		testTabView.setPreferredSize(new java.awt.Dimension(400, 400));

		testParamsTableModel = new DefaultTableModel();
		testParamsTableModel.addColumn("Name");
		testParamsTableModel.addColumn("Value");

		testParametersTable.setModel(testParamsTableModel);

		jScrollPane9.setViewportView(testParametersTable);
		testParametersTable.getColumnModel().getColumn(0).setResizable(false);
		testParametersTable.getColumnModel().getColumn(1).setResizable(false);

		javax.swing.GroupLayout pnParametersLayout = new javax.swing.GroupLayout(pnParameters);
		pnParameters.setLayout(pnParametersLayout);
		pnParametersLayout.setHorizontalGroup(pnParametersLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				pnParametersLayout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
						.addContainerGap()));
		pnParametersLayout.setVerticalGroup(pnParametersLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				pnParametersLayout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
						.addContainerGap()));

		testTabView.addTab("Parameters", pnParameters);

		testPropertiesTableModel = new DefaultTableModel();
		testPropertiesTableModel.addColumn("Key");
		testPropertiesTableModel.addColumn("Value");

		testPropertiesTable.setModel(testPropertiesTableModel);

		jScrollPane8.setViewportView(testPropertiesTable);
		testPropertiesTable.getColumnModel().getColumn(0).setResizable(false);
		testPropertiesTable.getColumnModel().getColumn(1).setResizable(false);

		addTestPropButton.setText("Add");
		addTestPropButton.setToolTipText("Add another row the properties table");
		addTestPropButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		addTestPropButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt, testPropertiesTableModel);
			}
		});

		removeTestPropButton.setText("Remove");
		removeTestPropButton.setToolTipText("Remove selected row from the properties table");
		removeTestPropButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		removeTestPropButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeButtonActionPerformed(evt, testPropertiesTableModel, testPropertiesTable);
			}
		});

		applyTestPropButton.setText("Apply");
		applyTestPropButton.setToolTipText("Apply all test properties");
		applyTestPropButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		applyTestPropButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				applyButtonActionPerformed(evt, testPropertiesTable, false);
			}
		});

		javax.swing.GroupLayout pnTestPropertiesLayout = new javax.swing.GroupLayout(pnTestProperties);
		pnTestProperties.setLayout(pnTestPropertiesLayout);
		pnTestPropertiesLayout.setHorizontalGroup(pnTestPropertiesLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				pnTestPropertiesLayout
						.createSequentialGroup()
						.addContainerGap()
						.addGroup(
								pnTestPropertiesLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(
												pnTestPropertiesLayout
														.createSequentialGroup()
														.addComponent(jScrollPane8,
																javax.swing.GroupLayout.DEFAULT_SIZE, 388,
																Short.MAX_VALUE).addGap(10, 10, 10))
										.addGroup(
												javax.swing.GroupLayout.Alignment.TRAILING,
												pnTestPropertiesLayout
														.createSequentialGroup()
														.addComponent(addTestPropButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(removeTestPropButton)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(applyTestPropButton).addContainerGap()))));
		pnTestPropertiesLayout.setVerticalGroup(pnTestPropertiesLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				pnTestPropertiesLayout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
						.addGap(11, 11, 11)
						.addGroup(
								pnTestPropertiesLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(applyTestPropButton)
										.addComponent(removeTestPropButton)
										.addComponent(addTestPropButton, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))));

		testTabView.addTab("Properties", pnTestProperties);

		taDocumentationValue.setColumns(20);
		taDocumentationValue.setRows(5);
		jScrollPane7.setViewportView(taDocumentationValue);

		javax.swing.GroupLayout pnDocumentationLayout = new javax.swing.GroupLayout(pnDocumentation);
		pnDocumentation.setLayout(pnDocumentationLayout);
		pnDocumentationLayout.setHorizontalGroup(pnDocumentationLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				pnDocumentationLayout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
						.addContainerGap()));
		pnDocumentationLayout.setVerticalGroup(pnDocumentationLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				pnDocumentationLayout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
						.addContainerGap()));

		testTabView.addTab("Documentation", pnDocumentation);

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel2Layout
								.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										jPanel2Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														jPanel2Layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		false)
																.addComponent(jPanel3,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(jPanel7,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(jPanel6,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE))
												.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(
														jPanel2Layout

																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		false)
																.addComponent(jPanel8,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE)
																.addComponent(testTabView,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE)))
								.addGap(15, 15, 15)));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel2Layout
								.createSequentialGroup()
								.addGap(22, 22, 22)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(testTabView, javax.swing.GroupLayout.PREFERRED_SIZE, 196,
										javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));

		addButton.setText("Add");
		addButton.setToolTipText("Add another row the properties table");
		addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt, executionTableModel);
			}
		});

		removeButton.setText("Remove");
		removeButton.setToolTipText("Remove selected row from the properties table");
		removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		removeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeButtonActionPerformed(evt, executionTableModel, propertiesTable);
			}
		});

		executionTableModel = new DefaultTableModel();
		executionTableModel.addColumn("Key");
		executionTableModel.addColumn("Value");
		executionTableModel.addRow(new String[] { "Build" });
		executionTableModel.addRow(new String[] { "Version" });

		propertiesTable.setModel(executionTableModel);

		jScrollPane2.setViewportView(propertiesTable);
		jScrollPane2.setBackground(new Color(0xf6, 0xf6, 0xf6));

		propertiesTable.getColumnModel().getColumn(0).setResizable(false);
		propertiesTable.getColumnModel().getColumn(1).setResizable(false);

		applyButton.setText("Apply");
		applyButton.setToolTipText("Apply");
		applyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		applyButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				applyButtonActionPerformed(evt, propertiesTable, true);
			}
		});

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Execution Properties",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel4Layout
								.createSequentialGroup()
								// .addGap(304, 304, 304)
								.addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(removeButton)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(applyButton).addContainerGap())
				.addGroup(
						jPanel4Layout.createSequentialGroup().addContainerGap()
								.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
								.addContainerGap()));
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel4Layout
								.createSequentialGroup()
								.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(
										jPanel4Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(removeButton)
												.addComponent(applyButton)
												.addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))));

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel5Layout
								.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										jPanel5Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap()));
		jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel5Layout
								.createSequentialGroup()
								.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addContainerGap()
								.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));

		jScrollPane3.setViewportView(jPanel5);
		jScrollPane3.setBorder(null);
		jScrollPane3.setPreferredSize(new java.awt.Dimension(javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE));

		jSplitPane1.setRightComponent(jScrollPane3);
		jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Execution Tests",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
		jScrollPane1.setPreferredSize(new java.awt.Dimension(javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE));

		testsTree.setRootVisible(false);
		testsTree.setScrollsOnExpand(false);
		testsTree.addTreeSelectionListener(this);
		jScrollPane1.setViewportView(testsTree);

		jSplitPane1.setLeftComponent(jScrollPane1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//				.addGroup(
//						layout.createSequentialGroup()
//								.addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE,
//										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap())
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap())
				.addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
//						.addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 31,
//								javax.swing.GroupLayout.PREFERRED_SIZE)
//						// .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 31,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void filterComboActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterComboActionPerformed
		treeModel.setViewType(filterCombo.getSelectedIndex());
		treeModel.modelChanged();
		refreshTree(false);
	}// GEN-LAST:event_filterComboActionPerformed

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
		int[] rows = testsTree.getSelectionRows();
		refreshTree(true);
		testsTree.setSelectionRows(rows);

		int numOfTests = testsTree.getRowCount();

		setPublishBtnEnable(numOfTests > 0);
	}// GEN-LAST:event_refreshButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteButtonActionPerformed
		/**
		 * multiselection- delete multiple nodes
		 */
		if (testsTree.getSelectionCount() > 1) {

			TreePath[] paths = testsTree.getSelectionPaths();
			for (int i = 0; i < paths.length; i++) {
				ElementNode temp = (ElementNode) paths[i].getLastPathComponent();
				ElementNode parent = (ElementNode) temp.getParent();
				if (parent != null) {
					parent.removeElement(temp);
					treeModel.modelChanged();
				}
			}
		}

		else {
			ElementNode parent = (ElementNode) currentNode.getParent();
			if (parent != null) {
				parent.removeElement(currentNode);
				treeModel.modelChanged();

			}
		}
		refreshTree(false);
		treeModel.writeToXmlFile();
	}// GEN-LAST:event_deleteButtonActionPerformed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
//		String[] serverData = textUrl.getText().split(":");
//		boolean ok = DBProperties.saveRunData("null", "null", "null", "null", "null", "null", serverData[1],
//				serverData[0]);
//		if (!ok)
//			log.log(Level.WARNING, "failed to save DB file");

		if (currentNode != null) {
			applyProperties(testPropertiesTable, false);
			updateElement(currentNode);
		}
		treeModel.writeToXmlFile();
		refreshAndSelect(true);
	}// GEN-LAST:event_saveButtonActionPerformed

//	private void 	(ActionEvent e) {
//		log.log(Level.INFO, "Update URL in DB file");
//		String[] serverData = textUrl.getText().split(":");
//		boolean ok = DBProperties.saveRunData("null", "null", "null", "null", "null", "null", serverData[1],
//				serverData[0]);
//		if (!ok)
//			log.log(Level.WARNING, "failed to save DB file");
//	}

	private void radioPassItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_radioPassItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			radioPass.setSelected(true);
			radioWarning.setSelected(false);
			radioFail.setSelected(false);
		}
	}// GEN-LAST:event_radioPassItemStateChanged

	private void radioFailItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_radioFailItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			radioPass.setSelected(false);
			radioWarning.setSelected(false);
			radioFail.setSelected(true);
		}
	}// GEN-LAST:event_radioFailItemStateChanged

	private void radioWarningItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_radioWarningItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			radioPass.setSelected(false);
			radioWarning.setSelected(true);
			radioFail.setSelected(false);
		}
	}// GEN-LAST:event_radioWarningItemStateChanged

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt, DefaultTableModel tableModel) {
		tableModel.addRow(new String[] { "", "" });
	}

	private void applyButtonActionPerformed(java.awt.event.ActionEvent evt, JTable table, boolean execution) {

		applyProperties(table, execution);

		// else {
		// testPropertiesTable.saveAllTextFields();
		// if (currentNode != null) {
		// currentNode.element.setAttribute("properties",
		// StringUtils.propertiesToString(properties));
		// treeModel.writeToXmlFile();
		// }
		// }
	}

	private void removeButtonActionPerformed(ActionEvent evt, DefaultTableModel tableModel, JTable table) {
		if (table.getSelectedRow() != -1)
			tableModel.removeRow(table.getSelectedRow());
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addButton;
	private javax.swing.JButton addTestPropButton;
	private javax.swing.JButton applyButton;
	private javax.swing.JButton removeButton;
	private javax.swing.JButton applyTestPropButton;
	private javax.swing.JButton removeTestPropButton;
	private javax.swing.JButton deleteButton;
	private javax.swing.JComboBox filterCombo;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane7;
	private javax.swing.JScrollPane jScrollPane8;
	private javax.swing.JScrollPane jScrollPane9;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JLabel lbErrorCause;
	private javax.swing.JLabel lbStatus;
	private javax.swing.JLabel lbTestIndex;
	private javax.swing.JLabel lbTestName;
	private javax.swing.JLabel lbTestTime;
	private javax.swing.JPanel pnDocumentation;
	private javax.swing.JPanel pnParameters;
	private javax.swing.JPanel pnTestProperties;
	private javax.swing.JTable propertiesTable;
	private javax.swing.JRadioButton radioFail;
	private javax.swing.JRadioButton radioPass;
	private javax.swing.JRadioButton radioWarning;
	private javax.swing.JButton refreshButton;
	private javax.swing.JButton saveButton;
	private javax.swing.JTextArea taDocumentationValue;
	private java.awt.TextArea testErrorCause;
	private javax.swing.JLabel testIndexField;
	private javax.swing.JLabel testNameField;
	private javax.swing.JTable testParametersTable;
	private javax.swing.JTable testPropertiesTable;
	private javax.swing.JTabbedPane testTabView;
	private javax.swing.JLabel testTimeField;
	private javax.swing.JTree testsTree;
	private javax.swing.JTextField textUrl;

	// End of variables declaration//GEN-END:variables

	/**
	 * Helper Functions
	 */
	public void refreshTree(boolean fromXml) {
		clearTextPane();
		try {
			treeModel.refresh(fromXml);
		} catch (Exception e) {
			log.log(Level.WARNING, "fail to refresh model", e);
			return;
		}

		testsTree.setModel(treeModel);

		expandTree();
		testsTree.repaint();
	}

	public void refreshAndSelect(boolean fromXml) {
		int[] rows = testsTree.getSelectionRows();
		refreshTree(fromXml);
		testsTree.setSelectionRows(rows);

		int numOfTests = testsTree.getRowCount();

		setPublishBtnEnable(numOfTests > 0);
	}

	private void expandTree() {
		if (testsTree == null) {
			return;
		}

		int row = 0;

		while (row < testsTree.getRowCount()) {
			testsTree.expandRow(row);
			row++;
		}
	}

	/**
	 * signals that the attributes have changed - updated them and writes to xml
	 * file
	 * 
	 * @param node
	 *            the treeNode to update
	 */
	private void updateElement(ElementNode node) {
		int status = getStatus();
		node.setStatus(status);
		String stat = "true";
		if (status == Reporter.FAIL) {
			stat = "false";
		} else if (status == Reporter.WARNING) {
			stat = "warning";
		}
		node.getElement().setAttribute("status", stat);
		// node.getElement().setAttribute("params",
		// taParametersValue.getText().replace('\n', ' '));
		node.getElement().setAttribute("params", StringUtils.propertiesToString(getParameters()));
		node.getElement().setAttribute("documentaion", taDocumentationValue.getText());
		// node.getElement().setAttribute("steps", infoPanel.getSteps());
		node.getElement().setAttribute("failCause", testErrorCause.getText());
		// String properties =
		// StringUtils.propertiesToString(testPropertiesTable.getProperties());
		node.getElement().setAttribute("properties", StringUtils.propertiesToString(testProperties));
		testsTree.repaint();
	}

	public void valueChanged(TreeSelectionEvent e) {
		if (currentNode != null) {
			updateElement(currentNode);
		}
		// save the selected node
		currentNode = (ElementNode) testsTree.getLastSelectedPathComponent();
		if (currentNode != null) {
			deleteButton.setEnabled(true);

			Element element = currentNode.getElement();
			long executeTime = Long.parseLong(element.getAttribute("endTime"))
					- Long.parseLong(element.getAttribute("startTime"));
			testNameField.setText(element.getAttribute("name"));
			testIndexField.setText(element.getAttribute("count"));
			testTimeField.setText(executeTime / 1000 + " seconds");
			if (currentNode.getStatus() == Reporter.PASS)
				radioPass.setSelected(true);
			else if (currentNode.getStatus() == Reporter.FAIL)
				radioFail.setSelected(true);
			if (currentNode.getStatus() == Reporter.WARNING)
				radioWarning.setSelected(true);
			testErrorCause.setText(element.getAttribute("failCause"));
			// taParametersValue.setText(element.getAttribute("params").replace(' ',
			// '\n'));
			setParameters(element.getAttribute("params"));
			taDocumentationValue.setText(element.getAttribute("documentaion"));

			// testPropertiesTable.setProperties(element.getAttribute("properties"));
			setProperties(element.getAttribute("properties"));

			// infoPanel.setTestParameters(element.getAttribute("name"),
			// Integer.parseInt(element.getAttribute("count")),
			// executeTime, currentNode.getStatus(),
			// element.getAttribute("params"), element
			// .getAttribute("documentaion"), element.getAttribute("steps"),
			// element
			// .getAttribute("properties"), element.getAttribute("failCause"));
			// infoPanel.setEditing(true);
		} else {
			deleteButton.setEnabled(false);

			// infoPanel.setTestParameters("", 1, 0, Reporter.PASS, "", "", "",
			// "", "");
			// infoPanel.setEditing(false);

		}
	}

	/**
	 * enable/disable "publish" button
	 * 
	 * @param b
	 *            enable/disable
	 */
	public static void setPublishBtnEnable(boolean enablePublishButton) {
		PublishXmlResultAction.getInstance().setEnabled(enablePublishButton);
	}

	private void clearTextPane() {

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub

	}

	public int getStatus() {
		if (radioPass.isSelected())
			return 0;
		if (radioFail.isSelected())
			return 1;
		if (radioWarning.isSelected())
			return 2;
		return 0;
	}

	private Properties exeProperties;
	private Properties testProperties;
	private Properties testParameters;

	private void applyProperties(JTable table, boolean execution) {
		Properties properties = new Properties();
		int num = table.getRowCount();
		properties.clear();
		String emptyProperties = "";
		String characterKeys = "";
		for (int i = 0; i < num; i++) {
			Object key = table.getValueAt(i, 0);
			Object value = table.getValueAt(i, 1);
			if (key != null && value != null) {
				String keyS = String.valueOf(key);
				String valueS = String.valueOf(value);
				// key or value are empty
				if (keyS.trim().equals("") || valueS.trim().equals("")) {
					emptyProperties += "\n" + keyS + "=" + valueS;
				}
				// dont allow chars in key or value
				else if (StringUtils.hasNotAllowedSpecialCharacters(keyS)
						|| StringUtils.hasNotAllowedSpecialCharacters(valueS)) {
					characterKeys += "\n" + keyS + "=" + valueS;
					// Add property if has a value
				} else {
					properties.setProperty(keyS, valueS);
				}
			}
		}
		if (!emptyProperties.equals("")) {
			ErrorPanel.showErrorDialog("Property with Empty keys/values were not added",
					"empty values were found in the following Properties: " + emptyProperties, ErrorLevel.Warning);
		}
		if (!characterKeys.equals("")) {
			ErrorPanel.showErrorDialog("Properties are not allowed Special Characters from "
					+ StringUtils.notAllowedCharacters, "found at properties: " + characterKeys, ErrorLevel.Warning);
		}
		// updatePanel();
		// TestInfoPanel.updateFile();
		ElementNode node;
		if (execution) {
			exeProperties = properties;
			node = (ElementNode) treeModel.getRoot();
		} else {
			testProperties = properties;
			node = currentNode;
		}
		node.getElement().setAttribute("properties", StringUtils.propertiesToString(properties));
		treeModel.writeToXmlFile();
	}

	private void updatePanel() {
		int num = testPropertiesTableModel.getRowCount();
		for (int i = num - 1; i >= 0; i--)
			testPropertiesTableModel.removeRow(i);
		Enumeration<Object> e = testProperties.keys();
		String key, value;
		while (e.hasMoreElements()) {
			key = (String) e.nextElement();
			value = testProperties.getProperty(key);
			testPropertiesTableModel.addRow(new String[] { key, value });
		}
		testPropertiesTable.setModel(testPropertiesTableModel);
		// int num = propPanel.getComponentCount();
		// this.revalidate();
	}

	private void updateParameters() {
		int num = testParamsTableModel.getRowCount();
		for (int i = num - 1; i >= 0; i--)
			testParamsTableModel.removeRow(i);
		Enumeration<Object> e = testParameters.keys();
		String key, value;
		while (e.hasMoreElements()) {
			key = (String) e.nextElement();
			value = testParameters.getProperty(key);
			testParamsTableModel.addRow(new String[] { key, value });
		}
		testParametersTable.setModel(testParamsTableModel);
	}

	/**
	 * get the current properties on the panel
	 * 
	 * @return test properties
	 */
	public Properties getProperties() {
		return testProperties;
	}

	/**
	 * set this panel properties
	 * 
	 * @param propString
	 *            the properties string
	 */
	public void setProperties(String propString) {
		if (propString == null)
			propString = "";
		testProperties = StringUtils.stringToProperties(propString);
		updatePanel();
	}

	public Properties getParameters() {
		return testParameters;
	}

	public void setParameters(String paramsString) {
		if (paramsString == null)
			paramsString = "";
		paramsString = paramsString.replaceAll("\n", "/SEP/");
		testParameters = StringUtils.stringToProperties(paramsString);
		updateParameters();
	}

	@Override
	public void setTestsTableController(TestsTableController testsTableController) {
		// TODO Auto-generated method stub
		
	}
}
